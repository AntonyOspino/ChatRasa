from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from typing import Any, Text, Dict, List
import datetime

# simulaci√≥n de BD en memoria
sintomas_usuario = []

# Usuario
class ActionValidarUsuarioAPI(Action):
    def name(self) -> Text:
        return "action_validar_usuario_api"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]):
        nombre_usuario = tracker.get_slot("nombre_usuario")
        dispatcher.utter_message(text=f"Verificando usuario '{nombre_usuario}' en el sistema... (simulaci√≥n API)")
        return []
class ActionGuardarEstadoAnimoAPI(Action):
    def name(self) -> Text:
        return "action_guardar_estado_animo_api"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]):
        estado_animo = tracker.latest_message.get("text")
        dispatcher.utter_message(text=f"Guardando estado de √°nimo '{estado_animo}' en la base de datos (simulaci√≥n API)...")
        return []


# Citas
class ActionAgendarCitaAPI(Action):
    def name(self) -> Text:
        return "action_agendar_cita_api"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]):
        dispatcher.utter_message(text="Creando cita m√©dica... (simulaci√≥n API)")
        dispatcher.utter_message(text="‚úÖ Tu cita fue registrada correctamente. Te notificaremos la fecha y el m√©dico asignado.")
        return []
class ActionCancelarCitaAPI(Action):
    def name(self) -> Text:
        return "action_cancelar_cita_api"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]):
        dispatcher.utter_message(text="Cancelando cita m√©dica... (simulaci√≥n API)")
        dispatcher.utter_message(text="‚úÖ Cita cancelada correctamente.")
        return []
class ActionObtenerCitasAPI(Action):
    def name(self) -> Text:
        return "action_obtener_citas_api"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]):
        dispatcher.utter_message(text="Buscando tus citas m√©dicas... (simulaci√≥n API)")
        dispatcher.utter_message(text="üìÖ Tienes 2 citas programadas:")
        dispatcher.utter_message(text="1Ô∏è‚É£ 15 de mayo a las 10:00")
        dispatcher.utter_message(text="2Ô∏è‚É£ 20 de mayo a las 14:00")
        return []



# Diagnosticos
class ActionGuardarDiagnosticoAPI(Action):
    def name(self) -> Text:
        return "action_guardar_diagnostico_api"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]):
        diagnostico = tracker.latest_message.get("text")
        dispatcher.utter_message(text=f"Guardando diagn√≥stico '{diagnostico}' en la base de datos (simulaci√≥n API)...")
        return []
class ActionObtenerDiagnosticoAPI(Action):
    def name(self) -> Text:
        return "action_obtener_diagnostico_api"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]):
        dispatcher.utter_message(text="Buscando tu diagn√≥stico m√°s reciente... (simulaci√≥n API)")
        dispatcher.utter_message(text="√öltimo diagn√≥stico: presi√≥n arterial estable, continuar con dieta saludable.")
        return []


# Medicos y notificaciones
class ActionObtenerMedicoAPI(Action):
    def name(self) -> Text:
        return "action_obtener_medico_api"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]):
        dispatcher.utter_message(text="Buscando Tu M√©dico... (simulaci√≥n API)")
        dispatcher.utter_message(text="Tu M√©dico Asignado Es: Dr. Mar√≠a L√≥pez")
        return []
class ActionEnviarNotificacionAPI(Action):
    def name(self) -> Text:
        return "action_enviar_notificacion_api"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]):
        dispatcher.utter_message(text="Enviando notificaci√≥n al m√©dico... (simulaci√≥n API)")
        dispatcher.utter_message(text="‚úÖ Notificaci√≥n enviada correctamente.")
        return []


# Sistomas
class ActionGuardarSintomasApi(Action):
    def name(self) -> Text:
        return "action_guardar_sintomas_api"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]):
        global sintomas_usuario

        if not sintomas_usuario:
            dispatcher.utter_message(text="No tengo s√≠ntomas registrados para guardar.")
            return []

        diagnostico = ", ".join(sintomas_usuario)
        recomendaciones = "Mant√©n h√°bitos saludables y consulta un m√©dico si los s√≠ntomas persisten."
        sistemas = "Sistema cardiovascular"
        fecha_creacion = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        # simulaci√≥n de env√≠o a API / base de datos
        print({
            "cita_id": None,
            "diagnostico": diagnostico,
            "recomendaciones": recomendaciones,
            "sistemas": sistemas,
            "fecha_creacion": fecha_creacion
        })

        dispatcher.utter_message(text="‚úÖ Tus s√≠ntomas fueron registrados correctamente (simulaci√≥n API).")
        sintomas_usuario = []
        return []

class ActionRecomendarSegunSintomas(Action):
    def name(self) -> Text:
        return "action_recomendar_seg√∫n_sintomas"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]):
        sintoma = tracker.latest_message.get("text")
        sintomas_usuario.append(sintoma)

        # respuestas personalizadas
        recomendaciones = {
            "pecho": "El dolor en el pecho puede ser signo de angina o infarto. Evita esfuerzos y consulta un m√©dico.",
            "mare": "El mareo puede estar asociado a baja presi√≥n o ritmo card√≠aco irregular.",
            "palpit": "Las palpitaciones pueden deberse al estr√©s o arritmias. Evita cafe√≠na y mant√©n reposo.",
            "presi√≥n": "Los cambios de presi√≥n afectan directamente al sistema cardiovascular. Controla tu tensi√≥n arterial.",
            "falta de aire": "La falta de aire puede indicar insuficiencia card√≠aca o ansiedad.",
            "hinchad": "La hinchaz√≥n en pies puede deberse a retenci√≥n de l√≠quidos o problemas card√≠acos."
        }

        texto = sintoma.lower()
        recomendacion = "Te recomiendo mantener reposo y observar tus s√≠ntomas."
        for palabra, respuesta in recomendaciones.items():
            if palabra in texto:
                recomendacion = respuesta
                break

        dispatcher.utter_message(text=f"Gracias por compartirlo. {recomendacion}")
        return []
